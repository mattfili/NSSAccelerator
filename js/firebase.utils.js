
// a simple wrapper on Firebase and AngularFire to simplify deps and keep things DRY
'use strict';

angular.module('valueprop').factory('fbutil', ['$window', 'FIRE_URL', '$q', function ($window, FIRE_URL, $q) {
  "use strict";

  var utils = {
    // convert a node or Firebase style callback to a future
    handler: function handler(fn, context) {
      return utils.defer(function (def) {
        fn.call(context, function (err, result) {
          if (err !== null) {
            def.reject(err);
          } else {
            def.resolve(result);
          }
        });
      });
    },

    // abstract the process of creating a future/promise
    defer: function defer(fn, context) {
      var def = $q.defer();
      fn.call(context, def);
      return def.promise;
    },

    ref: firebaseRef
  };

  return utils;

  function pathRef(args) {
    for (var i = 0; i < args.length; i++) {
      if (angular.isArray(args[i])) {
        args[i] = pathRef(args[i]);
      } else if (typeof args[i] !== 'string') {
        throw new Error('Argument ' + i + ' to firebaseRef is not a string: ' + args[i]);
      }
    }
    return args.join('/');
  }

  /**
   * Example:
   * <code>
   *    function(firebaseRef) {
     *       var ref = firebaseRef('path/to/data');
     *    }
   * </code>
   *
   * @function
   * @name firebaseRef
   * @param {String|Array...} path relative path to the root folder in Firebase instance
   * @return a Firebase instance
   */
  function firebaseRef(path) {
    var ref = new $window.Firebase(FIRE_URL);
    var args = Array.prototype.slice.call(arguments);
    if (args.length) {
      ref = ref.child(pathRef(args));
    }
    return ref;
  }
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9maXJlYmFzZS51dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FDdkIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFVBQVMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7QUFDOUUsY0FBWSxDQUFDOztBQUViLE1BQUksS0FBSyxHQUFHOztBQUVWLFdBQU8sRUFBRSxpQkFBUyxFQUFFLEVBQUUsT0FBTyxFQUFFO0FBQzdCLGFBQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUMvQixVQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDckMsY0FBSSxHQUFHLEtBQUssSUFBSSxFQUFHO0FBQUUsZUFBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztXQUFFLE1BQ2xDO0FBQUUsZUFBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztXQUFFO1NBQzlCLENBQUMsQ0FBQztPQUNKLENBQUMsQ0FBQztLQUNKOzs7QUFHRCxTQUFLLEVBQUUsZUFBUyxFQUFFLEVBQUUsT0FBTyxFQUFFO0FBQzNCLFVBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNyQixRQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QixhQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7S0FDcEI7O0FBRUQsT0FBRyxFQUFFLFdBQVc7R0FDakIsQ0FBQzs7QUFFRixTQUFPLEtBQUssQ0FBQzs7QUFFYixXQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDckIsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsVUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzVCLFlBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDNUIsTUFDSSxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRztBQUNyQyxjQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsbUNBQW1DLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDNUU7S0FDRjtBQUNELFdBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN2Qjs7Ozs7Ozs7Ozs7Ozs7O0FBZUQsV0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3pCLFFBQUksR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QyxRQUFJLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakQsUUFBSSxJQUFJLENBQUMsTUFBTSxFQUFHO0FBQ2hCLFNBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ2hDO0FBQ0QsV0FBTyxHQUFHLENBQUM7R0FDWjtDQUNILENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImZpcmViYXNlLnV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBhIHNpbXBsZSB3cmFwcGVyIG9uIEZpcmViYXNlIGFuZCBBbmd1bGFyRmlyZSB0byBzaW1wbGlmeSBkZXBzIGFuZCBrZWVwIHRoaW5ncyBEUllcbmFuZ3VsYXIubW9kdWxlKCd2YWx1ZXByb3AnKVxuICAgLmZhY3RvcnkoJ2ZidXRpbCcsIFsnJHdpbmRvdycsICdGSVJFX1VSTCcsICckcScsIGZ1bmN0aW9uKCR3aW5kb3csIEZJUkVfVVJMLCAkcSkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAgIHZhciB1dGlscyA9IHtcbiAgICAgICAgLy8gY29udmVydCBhIG5vZGUgb3IgRmlyZWJhc2Ugc3R5bGUgY2FsbGJhY2sgdG8gYSBmdXR1cmVcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZm4sIGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4gdXRpbHMuZGVmZXIoZnVuY3Rpb24oZGVmKSB7XG4gICAgICAgICAgICBmbi5jYWxsKGNvbnRleHQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmKCBlcnIgIT09IG51bGwgKSB7IGRlZi5yZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgICBlbHNlIHsgZGVmLnJlc29sdmUocmVzdWx0KTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gYWJzdHJhY3QgdGhlIHByb2Nlc3Mgb2YgY3JlYXRpbmcgYSBmdXR1cmUvcHJvbWlzZVxuICAgICAgICBkZWZlcjogZnVuY3Rpb24oZm4sIGNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgZGVmID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICBmbi5jYWxsKGNvbnRleHQsIGRlZik7XG4gICAgICAgICAgcmV0dXJuIGRlZi5wcm9taXNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlZjogZmlyZWJhc2VSZWZcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB1dGlscztcblxuICAgICAgZnVuY3Rpb24gcGF0aFJlZihhcmdzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoYXJnc1tpXSkpIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBwYXRoUmVmKGFyZ3NbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXJnc1tpXSAhPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50ICcraSsnIHRvIGZpcmViYXNlUmVmIGlzIG5vdCBhIHN0cmluZzogJythcmdzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3Muam9pbignLycpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKiA8Y29kZT5cbiAgICAgICAqICAgIGZ1bmN0aW9uKGZpcmViYXNlUmVmKSB7XG4gICAgICAgICAqICAgICAgIHZhciByZWYgPSBmaXJlYmFzZVJlZigncGF0aC90by9kYXRhJyk7XG4gICAgICAgICAqICAgIH1cbiAgICAgICAqIDwvY29kZT5cbiAgICAgICAqXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIGZpcmViYXNlUmVmXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheS4uLn0gcGF0aCByZWxhdGl2ZSBwYXRoIHRvIHRoZSByb290IGZvbGRlciBpbiBGaXJlYmFzZSBpbnN0YW5jZVxuICAgICAgICogQHJldHVybiBhIEZpcmViYXNlIGluc3RhbmNlXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZpcmViYXNlUmVmKHBhdGgpIHtcbiAgICAgICAgdmFyIHJlZiA9IG5ldyAkd2luZG93LkZpcmViYXNlKEZJUkVfVVJMKTtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBpZiggYXJncy5sZW5ndGggKSB7XG4gICAgICAgICAgcmVmID0gcmVmLmNoaWxkKHBhdGhSZWYoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWY7XG4gICAgICB9XG4gICB9XSk7XG5cbiJdfQ==
