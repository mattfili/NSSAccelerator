'use strict';

angular.module('valueprop').controller('main', function ($scope, FIRE_OBJ, FIRE_ARRAY, GET_FIRE, FIRE_COMMENT, $uibModal, $log, $stateParams, $state) {

  var vm = this;

  vm.animationsEnabled = true;

  vm.addConsideration = function () {
    var modalInstance = $uibModal.open({
      animation: vm.animationsEnabled,
      templateUrl: 'assets/components/addConsid.html',
      controller: 'considModalCtrl'
    });

    modalInstance.result.then(function (formData) {
      FIRE_ARRAY.$add(formData).then(function (result) {
        console.log(result.ref());
      });
    });
  };

  if ($state.current.url === '/') {
    var params = false;
  } else if ($state.current.url === 'considerations/:id') {
    var params = true;
    GET_FIRE.on('value', function (snap) {
      console.log('------comment------');
      console.log(snap);
      console.log('------comment------');
      vm.comments = snap.val();
    }, function (errorObject) {
      console.log("The read failed: " + errorObject.code);
    });
  }

  vm.params = params;

  vm.addComment = function () {
    var modalInstance = $uibModal.open({
      animation: vm.animationsEnabled,
      templateUrl: 'assets/components/addComment.html',
      controller: 'commModalCtrl'
    });

    modalInstance.result.then(function (formData) {
      FIRE_COMMENT.$add(formData).then(function (result) {
        console.log(result.ref());
      });
    });
  };
}).controller('commModalCtrl', function ($modalInstance, $scope) {

  var vm = this;

  $scope.formData = {
    title: '',
    summary: '',
    content: ''
  };

  $scope.ok = function () {
    $modalInstance.close($scope.formData);
  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };
}).controller('considModalCtrl', function ($modalInstance, $scope) {

  var vm = this;

  $scope.formData = {
    description: '',
    user: '',
    job: ''
  };

  $scope.ok = function () {
    $modalInstance.close($scope.formData);
  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };
}).controller('considCtrl', function (FIRE, $scope, $stateParams, $state) {

  var vm = this;

  FIRE.on('value', function (snap) {
    $scope.consid = snap.val();
  }, function (errorObject) {
    console.log("The read failed: " + errorObject.code);
  });

  console.log($state);
  console.log($stateParams);

  if (!$stateParams) {
    $scope.params === false;
  } else {
    $scope.params === true;
  }
}).controller('LoginCtrl', ['$scope', 'Auth', '$location', 'fbutil', function ($scope, Auth, $location, fbutil) {
  $scope.email = null;
  $scope.pass = null;
  $scope.confirm = null;
  $scope.createMode = false;

  $scope.login = function (email, pass) {
    $scope.err = null;
    Auth.$authWithPassword({ email: email, password: pass }, { rememberMe: true }).then(function () /* user */{
      console.log('logged in');
      alert('logged in');
    }, function (err) {
      $scope.err = errMessage(err);
    });
  };

  $scope.createAccount = function () {
    $scope.err = null;
    if (assertValidAccountProps()) {
      var email = $scope.email;
      var pass = $scope.pass;
      // create user credentials in Firebase auth system
      Auth.$createUser({ email: email, password: pass }).then(function () {
        // authenticate so we have permission to write to Firebase
        return Auth.$authWithPassword({ email: email, password: pass });
      }).then(function (user) {
        // create a user profile in our data store
        var ref = fbutil.ref('users', user.uid);
        return fbutil.handler(function (cb) {
          ref.set({ email: email, name: name || firstPartOfEmail(email) }, cb);
        });
      });
    }
  };

  function assertValidAccountProps() {
    if (!$scope.email) {
      $scope.err = 'Please enter an email address';
    } else if (!$scope.pass || !$scope.confirm) {
      $scope.err = 'Please enter a password';
    } else if ($scope.createMode && $scope.pass !== $scope.confirm) {
      $scope.err = 'Passwords do not match';
    }
    return !$scope.err;
  }

  function errMessage(err) {
    return angular.isObject(err) && err.code ? err.code : err + '';
  }

  function firstPartOfEmail(email) {
    return ucfirst(email.substr(0, email.indexOf('@')) || '');
  }

  function ucfirst(str) {
    // inspired by: http://kevin.vanzonneveld.net
    str += '';
    var f = str.charAt(0).toUpperCase();
    return f + str.substr(1);
  }
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9tYWluLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUUxQixVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVMsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUU7O0FBRXpILE1BQUksRUFBRSxHQUFHLElBQUksQ0FBQzs7QUFFZCxJQUFFLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDOztBQUU1QixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsWUFBWTtBQUNqQyxRQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQzlCLGVBQVMsRUFBRSxFQUFFLENBQUMsaUJBQWlCO0FBQy9CLGlCQUFXLEVBQUUsa0NBQWtDO0FBQy9DLGdCQUFVLEVBQUUsaUJBQWlCO0tBQzlCLENBQUMsQ0FBQzs7QUFFSCxpQkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBUyxRQUFRLEVBQUU7QUFDNUMsZ0JBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsTUFBTSxFQUFFO0FBQy9DLGVBQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7T0FDMUIsQ0FBQyxDQUFBO0tBQ0YsQ0FBQyxDQUFBO0dBRUwsQ0FBQTs7QUFHRCxNQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtBQUMvQixRQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7R0FDbkIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLG9CQUFvQixFQUFFO0FBQ3ZELFFBQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUNsQixZQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8s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T0FBTyxFQUFHO0FBQzdELFlBQU0sQ0FBQyxHQUFHLEdBQUcsd0JBQXdCLENBQUM7S0FDdkM7QUFDRCxXQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztHQUNwQjs7QUFFRCxXQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDdkIsV0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0dBQy9EOztBQUVELFdBQVMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO0FBQy9CLFdBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQztHQUN6RDs7QUFFRCxXQUFTLE9BQU8sQ0FBRSxHQUFHLEVBQUU7O0FBRXJCLE9BQUcsSUFBSSxFQUFFLENBQUM7QUFDVixRQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3BDLFdBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDMUI7Q0FDRixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJtYWluLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgndmFsdWVwcm9wJylcblxuLmNvbnRyb2xsZXIoJ21haW4nLCBmdW5jdGlvbigkc2NvcGUsIEZJUkVfT0JKLCBGSVJFX0FSUkFZLCBHRVRfRklSRSwgRklSRV9DT01NRU5ULCAkdWliTW9kYWwsICRsb2csICRzdGF0ZVBhcmFtcywgJHN0YXRlKSB7XG5cblx0dmFyIHZtID0gdGhpcztcblxuXHR2bS5hbmltYXRpb25zRW5hYmxlZCA9IHRydWU7XG5cblx0dm0uYWRkQ29uc2lkZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0ICAgICAgYW5pbWF0aW9uOiB2bS5hbmltYXRpb25zRW5hYmxlZCxcblx0ICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvY29tcG9uZW50cy9hZGRDb25zaWQuaHRtbCcsXG5cdCAgICAgIGNvbnRyb2xsZXI6ICdjb25zaWRNb2RhbEN0cmwnXG5cdCAgICB9KTtcblxuXHQgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbihmb3JtRGF0YSkge1xuXHQgICAgXHRGSVJFX0FSUkFZLiRhZGQoZm9ybURhdGEpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICBcdFx0Y29uc29sZS5sb2cocmVzdWx0LnJlZigpKTtcblx0ICAgIFx0fSlcblx0ICAgIH0pXG5cdFxuXHR9XG5cdFxuXG5cdGlmICgkc3RhdGUuY3VycmVudC51cmwgPT09ICcvJykge1xuXHRcdHZhciBwYXJhbXMgPSBmYWxzZTtcblx0fSBlbHNlIGlmICgkc3RhdGUuY3VycmVudC51cmwgPT09ICdjb25zaWRlcmF0aW9ucy86aWQnKSB7XG5cdFx0dmFyIHBhcmFtcyA9IHRydWU7XG5cdFx0R0VUX0ZJUkUub24oJ3ZhbHVlJywgZnVuY3Rpb24gKHNuYXApIHtcblx0XHRcdGNvbnNvbGUubG9nKCctLS0tLS1jb21tZW50LS0tLS0tJylcblx0XHRcdGNvbnNvbGUubG9nKHNuYXApXG5cdFx0XHRjb25zb2xlLmxvZygnLS0tLS0tY29tbWVudC0tLS0tLScpXG5cdFx0XHR2bS5jb21tZW50cyA9IHNuYXAudmFsKClcblx0fSwgZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XHRcblx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIHJlYWQgZmFpbGVkOiBcIiArIGVycm9yT2JqZWN0LmNvZGUpO1xuXHR9KVxuXHR9XG5cblx0dm0ucGFyYW1zID0gcGFyYW1zO1xuXG5cdHZtLmFkZENvbW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG5cdCAgICAgIGFuaW1hdGlvbjogdm0uYW5pbWF0aW9uc0VuYWJsZWQsXG5cdCAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL2NvbXBvbmVudHMvYWRkQ29tbWVudC5odG1sJyxcblx0ICAgICAgY29udHJvbGxlcjogJ2NvbW1Nb2RhbEN0cmwnXG5cdCAgICB9KTtcblxuXHQgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbihmb3JtRGF0YSkge1xuXHQgICAgXHRGSVJFX0NPTU1FTlQuJGFkZChmb3JtRGF0YSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblx0ICAgIFx0XHRjb25zb2xlLmxvZyhyZXN1bHQucmVmKCkpO1xuXHQgICAgXHR9KVxuXHQgICAgfSlcblx0XG5cdH1cblxuXG59KVxuXG4uY29udHJvbGxlcignY29tbU1vZGFsQ3RybCcsIGZ1bmN0aW9uICgkbW9kYWxJbnN0YW5jZSwgJHNjb3BlKSB7XG5cblx0dmFyIHZtID0gdGhpcztcblxuXHQkc2NvcGUuZm9ybURhdGEgPSB7XG5cdFx0dGl0bGU6ICcnLFxuXHRcdHN1bW1hcnk6ICcnLFxuXHRcdGNvbnRlbnQ6ICcnXG5cdH1cblxuICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLmZvcm1EYXRhKTtcbiAgfTtcblxuICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICB9O1xufSlcblxuLmNvbnRyb2xsZXIoJ2NvbnNpZE1vZGFsQ3RybCcsIGZ1bmN0aW9uICgkbW9kYWxJbnN0YW5jZSwgJHNjb3BlKSB7XG5cblx0dmFyIHZtID0gdGhpcztcblxuXHQkc2NvcGUuZm9ybURhdGEgPSB7XG5cdFx0ZGVzY3JpcHRpb246ICcnLFxuXHRcdHVzZXI6ICcnLFxuXHRcdGpvYjogJydcblx0fVxuXG4gICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcbiAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUuZm9ybURhdGEpO1xuICB9O1xuXG4gICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gIH07XG59KVxuXG4uY29udHJvbGxlcignY29uc2lkQ3RybCcsIGZ1bmN0aW9uIChGSVJFLCAkc2NvcGUsICRzdGF0ZVBhcmFtcywgJHN0YXRlKSB7XG5cblx0dmFyIHZtID0gdGhpcztcblxuXHRGSVJFLm9uKCd2YWx1ZScsIGZ1bmN0aW9uIChzbmFwKSB7XG5cdFx0JHNjb3BlLmNvbnNpZCA9IHNuYXAudmFsKClcblx0fSwgZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XHRcblx0XHRjb25zb2xlLmxvZyhcIlRoZSByZWFkIGZhaWxlZDogXCIgKyBlcnJvck9iamVjdC5jb2RlKTtcblx0fSlcblxuXHRjb25zb2xlLmxvZygkc3RhdGUpXG5cdGNvbnNvbGUubG9nKCRzdGF0ZVBhcmFtcylcblxuXHRpZiAoISRzdGF0ZVBhcmFtcykge1xuXHRcdCRzY29wZS5wYXJhbXMgPT09IGZhbHNlXG5cdH0gZWxzZSB7XG5cdFx0JHNjb3BlLnBhcmFtcyA9PT0gdHJ1ZVxuXHR9XG59KVxuXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc2NvcGUnLCAnQXV0aCcsICckbG9jYXRpb24nLCAnZmJ1dGlsJywgZnVuY3Rpb24oJHNjb3BlLCBBdXRoLCAkbG9jYXRpb24sIGZidXRpbCkge1xuICAgICRzY29wZS5lbWFpbCA9IG51bGw7XG4gICAgJHNjb3BlLnBhc3MgPSBudWxsO1xuICAgICRzY29wZS5jb25maXJtID0gbnVsbDtcbiAgICAkc2NvcGUuY3JlYXRlTW9kZSA9IGZhbHNlO1xuXG4gICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3MpIHtcbiAgICAgICRzY29wZS5lcnIgPSBudWxsO1xuICAgICAgQXV0aC4kYXV0aFdpdGhQYXNzd29yZCh7IGVtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3MgfSwge3JlbWVtYmVyTWU6IHRydWV9KVxuICAgICAgICAudGhlbihmdW5jdGlvbigvKiB1c2VyICovKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2xvZ2dlZCBpbicpO1xuICAgICAgICAgIGFsZXJ0KCdsb2dnZWQgaW4nKVxuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAkc2NvcGUuZXJyID0gZXJyTWVzc2FnZShlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZUFjY291bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5lcnIgPSBudWxsO1xuICAgICAgaWYoIGFzc2VydFZhbGlkQWNjb3VudFByb3BzKCkgKSB7XG4gICAgICAgIHZhciBlbWFpbCA9ICRzY29wZS5lbWFpbDtcbiAgICAgICAgdmFyIHBhc3MgPSAkc2NvcGUucGFzcztcbiAgICAgICAgLy8gY3JlYXRlIHVzZXIgY3JlZGVudGlhbHMgaW4gRmlyZWJhc2UgYXV0aCBzeXN0ZW1cbiAgICAgICAgQXV0aC4kY3JlYXRlVXNlcih7ZW1haWw6IGVtYWlsLCBwYXNzd29yZDogcGFzc30pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGUgc28gd2UgaGF2ZSBwZXJtaXNzaW9uIHRvIHdyaXRlIHRvIEZpcmViYXNlXG4gICAgICAgICAgICByZXR1cm4gQXV0aC4kYXV0aFdpdGhQYXNzd29yZCh7IGVtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3MgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYSB1c2VyIHByb2ZpbGUgaW4gb3VyIGRhdGEgc3RvcmVcbiAgICAgICAgICAgIHZhciByZWYgPSBmYnV0aWwucmVmKCd1c2VycycsIHVzZXIudWlkKTtcbiAgICAgICAgICAgIHJldHVybiBmYnV0aWwuaGFuZGxlcihmdW5jdGlvbihjYikge1xuICAgICAgICAgICAgICByZWYuc2V0KHtlbWFpbDogZW1haWwsIG5hbWU6IG5hbWV8fGZpcnN0UGFydE9mRW1haWwoZW1haWwpfSwgY2IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXNzZXJ0VmFsaWRBY2NvdW50UHJvcHMoKSB7XG4gICAgICBpZiggISRzY29wZS5lbWFpbCApIHtcbiAgICAgICAgJHNjb3BlLmVyciA9ICdQbGVhc2UgZW50ZXIgYW4gZW1haWwgYWRkcmVzcyc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCAhJHNjb3BlLnBhc3MgfHwgISRzY29wZS5jb25maXJtICkge1xuICAgICAgICAkc2NvcGUuZXJyID0gJ1BsZWFzZSBlbnRlciBhIHBhc3N3b3JkJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoICRzY29wZS5jcmVhdGVNb2RlICYmICRzY29wZS5wYXNzICE9PSAkc2NvcGUuY29uZmlybSApIHtcbiAgICAgICAgJHNjb3BlLmVyciA9ICdQYXNzd29yZHMgZG8gbm90IG1hdGNoJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAhJHNjb3BlLmVycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJNZXNzYWdlKGVycikge1xuICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNPYmplY3QoZXJyKSAmJiBlcnIuY29kZT8gZXJyLmNvZGUgOiBlcnIgKyAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXJzdFBhcnRPZkVtYWlsKGVtYWlsKSB7XG4gICAgICByZXR1cm4gdWNmaXJzdChlbWFpbC5zdWJzdHIoMCwgZW1haWwuaW5kZXhPZignQCcpKXx8JycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVjZmlyc3QgKHN0cikge1xuICAgICAgLy8gaW5zcGlyZWQgYnk6IGh0dHA6Ly9rZXZpbi52YW56b25uZXZlbGQubmV0XG4gICAgICBzdHIgKz0gJyc7XG4gICAgICB2YXIgZiA9IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcbiAgICAgIHJldHVybiBmICsgc3RyLnN1YnN0cigxKTtcbiAgICB9XG4gIH1dKTtcbiJdfQ==
